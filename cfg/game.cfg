MEMORY {

    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
	ROM_00:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_01:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_02:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_03:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_04:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_05:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_06:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_07:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_08:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_09:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0A:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0B:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0C:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0D:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0E:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	PRG:		start = $c000, size = $4000, file = %O, fill = yes, define = no;
    CHR_0: 		start = $0000, size = $2000, file = %O, fill = yes;
	CHR_1:		start = $0000, size = $2000, file = %O, fill = yes;
    RAM:		start = $0300, size = $0500, define = yes;

	  # Use this definition instead if you going to use extra 8K RAM
	  # RAM: start = $6000, size = $2000, define = yes;
	  
}

SEGMENTS {

    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    ROM_00:		load = ROM_00,	type = ro, define = no;
	ROM_01:		load = ROM_01,	type = ro, define = no;
	ROM_02:		load = ROM_02,	type = ro, define = no;
	ROM_03:		load = ROM_03,	type = ro, define = no;
	ROM_04:		load = ROM_04,	type = ro, define = no;
	ROM_05:		load = ROM_05,	type = ro, define = no;
	ROM_06:		load = ROM_06,	type = ro, define = no;
	ROM_07:		load = ROM_07,	type = ro, define = no;
	ROM_08:		load = ROM_08,	type = ro, define = no;
	ROM_09:		load = ROM_09,	type = ro, define = no;
	ROM_0A:		load = ROM_0A,	type = ro, define = no;
	ROM_0B:		load = ROM_0B,	type = ro, define = no;
	ROM_0C:		load = ROM_0C,	type = ro, define = no;
	ROM_0D:		load = ROM_0D,	type = ro, define = no;
	ROM_0E:		load = ROM_0E,	type = ro, define = no;
    # Stubs that contain reset code to put ourselves into a known fixed-c000 state.
	STUB_00:   load = ROM_00, type = ro, start = $BFF0;
	STUB_01:   load = ROM_01, type = ro, start = $BFF0;
	STUB_02:   load = ROM_02, type = ro, start = $BFF0;
	STUB_03:   load = ROM_03, type = ro, start = $BFF0;
	STUB_04:   load = ROM_04, type = ro, start = $BFF0;
	STUB_05:   load = ROM_05, type = ro, start = $BFF0;
	STUB_06:   load = ROM_06, type = ro, start = $BFF0;
	STUB_07:   load = ROM_07, type = ro, start = $BFF0;
	STUB_08:   load = ROM_08, type = ro, start = $BFF0;
	STUB_09:   load = ROM_09, type = ro, start = $BFF0;
	STUB_0A:   load = ROM_0A, type = ro, start = $BFF0;
	STUB_0B:   load = ROM_0B, type = ro, start = $BFF0;
	STUB_0C:   load = ROM_0C, type = ro, start = $BFF0;
	STUB_0D:   load = ROM_0D, type = ro, start = $BFF0;
	STUB_0E:   load = ROM_0E, type = ro, start = $BFF0;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    STUB_PRG:  load = PRG,    type = ro, start = $FFF0;
    CHR_0:    load = CHR_0,            type = ro;
	CHR_1:	  load = CHR_1, type = ro;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
		
}

SYMBOLS {

    __STACKSIZE__ = $0500;  	# 5 pages stack
	
	NES_PRG_BANKS = 16; 			# number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS = 2; 			# number of 8K CHR banks (If using 4k, multiply by 2!)


}